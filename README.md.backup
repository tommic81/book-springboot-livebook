# SpringBoot Live Book

## Narodziny SpringBoot
- SpringBoot = Spring Framework + Kontener APlikacji + Konfiguracja

### Spring Context
- **Bean** - obiekt zarządzany
- **Spring Context** - uporządkowany zbiór beanów
- [Cała Prawda o Spring IoC Containers | Wykład Pod Norweską Chmurką](https://livebooks.pl/materials/v1/18)
- [Oficjalna dokumentacja Spring Framework](https://docs.spring.io/spring-framework/reference/)
- [Spring Context – Jak Działa Kontener IoC?](https://bykowski.pl/spring-context-jak-dziala-kontener-ioc/)

- Core container składa się z:
  - Bean
  - Core
  - Context
  - SpEL
  
 - Bean z Core tworza Bean Factory
 - Dziedziczenia: Bean Factory <- Application Context <-WebApplicationContext 
 - XML Bean Factory jest implementacją Bean Factory
 - Bean Factory tworzy Beany korzystająć z konfiguracji oraz POJO
 
 - Konfiguracja:
   - Adnotacje – oznaczenie klas adnotacjami, dzięki którym Spring wie jak dany bean ma zostać zakwalifikowany.
   - Klasa konfiguracyjna – miejsce w którym dostarczamy definicję beanów za pomocą kodu źródłowego (np. Java, Kotlin).
   - Plik XML – ustrukturyzowany plik, który zawiera definicje beanów ujętą w znacznikach XML.

- ApplicationContext dostarcaa  to samo co Bean Factory, a dodatkowo:
  - Zestaw metod umożliwiających na swobodny do beanów.
  - Proste wczytywanie zasobów aplikacji.
  - Możliwość publikowania zdarzeń i nasłuchiwania zdarzeń.
  - Wsparcie dla dostarczania konfiguracji na potrzeby internacjonalizacji.
  
### Definiowanie Beana
- Adnotacje
- `@Component` - ogólny, do mapperów, konwerterów itp.
- `@Repository`- dostęp do danych
- `@Service` - logika biznesowa
- `@Controller/@RestController` - warstwa prezentacja/API

Dobrzy kandydaci do zarzadzania przez kontekst Spring to klasy, które przez cały cykl rzycia maja tylko jeden egzemplarz. 

- Klasa konfiguracyjna
- XML

### Metody wstrzykiwania zależności
- Konstruktor (zalecana) 
- Pole
- Settery

### Hello World
- [Zakładanie projektu](https://livebooks.pl/materials/v1/27)

## Zarządzanie konfiguracją
- Podstawowy plik konfiguracyjny: **application.properties**
- Dobrą praktyką definiowania kluczy jest stosowanie małych liter i oddzielanie słów myślnikami `spring.messages.fallback-to-system-locale=true`
- Innym sposobem jest podanie nazwy klasy + kropka + nazwa zmiennej: `myConfigReader.exampleString=hello!`
- Aby zaczytać konfiguracje do pola w klasie  posługujemy sie adnotacją `@Value` z parametrem `${klucz.do.przyjmowanej.wartosci}`
- [Zarządzanie konfiguracją](https://livebooks.pl/materials/v1/33a)
- [Common Application Properties](https://livebooks.pl/materials/v1/33c)
- [Test wiedzy do rozdziału: 01 KONFIGURACJA I PROFILOWANIE](https://livebooks.pl/materials/v1/34)

```properties
spring.application.name=sp-test
# port jest losowy
server.port=0

page-info.author=Przemek
page-info.creation-date=2019

```

- Konfiguracja z application.properties może byc nadpisana przez:
  - opcje uruchomieniowe VM `-Dpage-info.author=Karol`
  - parametr uruchomieniowy w konsoli: `java -jar .\sp-test-0.0.1-SNAPSHOT.jar --page-info.author=Jacek`
  
- Automatyczne wpisanie parametrow do pól w klasie wykonuje sie za pomocą adnotacji `@ConfigurationProperties(prefix = "page-info")`. Pola muszą mieć **settery** oraz nazwy pól muszą być zgodne nazwami kluczy w konfiguracji po prefixie.

### Profile
- [Profilowanie](https://livebooks.pl/materials/v1/33b)
- Osobna konfiguracja dla różnych środowisk (prod, uat, test itp.)
- Aktywny profil włączamy:
  - z poziomu konfiguracji `spring.profiles.active=dev`
  - podając opcje uruchomieniowe VM `-Dspring.profiles.active=dev`
  - z poziomu konsoli
  
- Za pomocą profili można włączać/wyłączać beany

```
@Component
@Profile("Premium")
public class ShopPremium {
    
    @EventListener(ApplicationReadyEvent.class)
    public void get(){
        System.out.println("ShopPremium");
    }
}
```

## Rest Api
- Implementuje się korzystając z adnotacji:
- `@RestController` - dla klasy
- `@RestMapping` - metoda restowa. Można też adnotować klasy. Wtedy ścieżka dla wszystkich metod będzie poprzedzona wartościa z tej adnotacji.
- [NAJEFEKTYWNIEJSZA DROGA DO TWORZENIA REST API W SPRING](https://livebooks.pl/materials/v1/43)
- [efektywne-rest-api.jpg](https://livebooks.pl/materials/v1/44)
- [repozytorium DTO](https://github.com/bykowski/springboot2/tree/patterns-dto)
- 
```java
@RestController
@RequestMapping("/api")
public class Shop {

	// http://localhost:8080/api/get-example
	@RequestMapping("/get-example")
	@RequestBody
	public String purchase(){
		return "Siema Byku!"	
	}
}
``` 

### Metody HTTP
- `@RequestMapping` domyślnie stosuje metodę GET
- Można wskazać na inne metody HTTP: GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS, TRACE
- POST  
  - Tworzy nowy zasób.
  - Jest wykorzystywany do wszystkich innych operacji, które nie wpisują się w ramy innych metod.
  - Może służyć do pobierania danych w przypadku kiedy musimy w ramach body dostarczyć dodatkowe parametry.
- PUT
  - Aktualizuje dany zasób na podstawie podanego identyfikatora.
  - Może służyć do tworzenia nowego zasobu jeśli jego identyfikator jest znany.
- PATCH
  - Aktualizuje część wskazanego zasobu.
   
- Dostepne są aliasy metod webowych:
  - `@GetMapping` 
  - `@PostMapping` 
  - `@PutMapping` 
  - `@DeleteMapping` 
  - `@PatchMapping` 

### Parametryzacja metod REST-owych
- Przykazywanie danych do metody odbywa się przez:
  - nagłówek
  - parametr
  - sciężkę
  - ciało
  
#### Przekazywanie przez nagłówek
- Dotyczy metadanych, ustawienia kodowanie, szyfrowania, wybór języka format odpowiedzi itp.
- Stosujemy adnotację `@RequestHeader`

```
@RequestMapping("/get-request-header")
public String requestHeaderExample(@RequestHeader("number") Long number){
	return "delivered by RequestHeader: "+ number;
}
```
#### Przekazywanie przez parametr
- Stosujemy adnotację `@RequestParam`

```java
@RequestMapping("/get-request-param")
public String requestParamExample(@RequestParam("number") Long number){
	return "delivered by RequestParam: "+ number;
}
```

#### Przekazywanie przez adres
- Typowe dla pobierania konkretnego elementu z kolekcji.
- Kiedy API zwraca wiele stron wynikowych
- Stosujemy adnotację `@PathVariable`

```java
@RequestMapping("/get-path-variable/{number}")
public String pathVariableExample(@PathVariable("number") Long number){
	return "delivered by PathVariable: "+ number;
}
```

#### Przekazywanie przez ciało
- Do przekazywania złożonuch obiektów, list, kolekcji.
- Stosujemy adnotację `@RequestBody`.
```java
@RequestMapping("/get-request-body", method=RequestMethod.POST)
public String requestBodyExample(@RequestBody Long number){
	return "delivered by RequestBody: "+ number;
}
```

### Mapowanie DTO
- Pobrane obiekty z bazy należy jak najszybciej przemapować na DTO.

```
<dependency>
  <groupId>org.modelmapper</groupId>
  <artifactId>modelmapper</artifactId>
  <version>3.0.0</version>
</dependency>
```
### Ograniczanie widoczności
- `@JsonView` - ustawiamy nad polami DTO oraz w metodzie rest api
- Jako parametr podajemy klasy, które mają reprezentować widoki
```
public class Views {
    public static class Public {
    }
}

public class User {
    public int id;

    @JsonView(Views.Public.class)
    public String name;
}
```


### Dokumentowanie API
- [Przykład na github](https://livebooks.pl/materials/v1/52a)
- [SWAGGER 2 – BUDOWANIE, WERYFIKOWANIE I DOKUMENTOWANIE API - PRZYKŁADY](https://livebooks.pl/materials/v1/52b)
- [Swagger UI – przejrzysta wizualizacja zasobów API](https://bykowski.pl/swagger-ui-przejrzysta-wizualizacja-zasobow-api/)
- [Test wiedzy](https://livebooks.pl/materials/v1/52c)
#### Swagger - narzędzie do dokumentowania API
```xml
<dependency>
  <groupId>io.springfox</groupId>
  <artifactId>springfox-boot-starter</artifactId>
  <version>3.0.0</version>
</dependency>  
```
#### Konfiguracja
- Klasa konfiguracyjna z andoracjami `@Configuration` i `@EnableWebMvc`
- W klasie definiujemy obiekt Docket zamewnaijący metody konfiguracji dla Swagger UI
```
@Configuration
@EnableWebMvc
public class SwaggerConfig{

  @Bean
  public Docket getDocket(){
  	return new Docket(DocumentationType.SWAGGER_2)
  		.select()
  		.apis(RequestHandlerSelectors.any())
  		.paths(PathSelectors.any())
  		.build();
  }
}
```
- adres swaggera: http://localhost:8080/swagger-ui
- Przykład adnotacji dla metody Rest
```
    @ApiOperation(value = "Find student by id", notes = "provide information about student by id")
    @GetMapping("/{id}")
    public Student getStudents(@ApiParam(value = "unique id of student", example = "123") @PathVariable int id) {
        return studentList.stream()
                .filter(student -> student.getId() == id).findFirst().get();
    }
```
- Przykład adnotacji dla modelu
```java
@ApiModel("Personal data of Student")
public class Student {

    @ApiModelProperty("unique id of student")
    private int id;
    private String name;
    private String surname;

    public Student() {
    }

    public Student(int id, String name, String surname) {
        this.id = id;
        this.name = name;
        this.surname = surname;
    }
}
```
 
 
#### Zawężanie udostępnianej dokumentacji
- Przykładowa definicja ogranicza generowanie dokumentacji dla usług spełniających 2 warunki: endpoint wystawiony na `/api/**` klasa kontrolera znajduje się w ścieżce `pl.bykowski.springbootswaggerexample`
```java

  @Bean
  public Docket getDocket(){
  	return new Docket(DocumentationType.SWAGGER_2)
  		.select()
  		.paths(PathSelectors.ant("/api/**"))
  		.apis(RequestHandlerSelectors.basePackage("pl.bykowski.springbootswaggerexample"))		
  	.build();
  }
```
- Przykład z ApiInfo
```java
@Bean
    public Docket get() {
        return new Docket(DocumentationType.SWAGGER_2)
                .select()
                .paths(PathSelectors.ant("/api/**"))
                .apis(RequestHandlerSelectors.basePackage("pl.bykowski.springbootswaggerexample"))
                .build().apiInfo(createApiInfo());
    }

    private ApiInfo createApiInfo() {
        return new ApiInfo("Stundes API",
                "Students database",
                "1.00",
                "http://bykowski.pl",
                new Contact("Przemek", "http://bykowski.pl", "przemek@bykowski.pl"),
                "my own licence",
                "http://bykowski.pl",
                Collections.emptyList()
        );
    }
```

## Spring MVC

- [spring-mvc](https://livebooks.pl/materials/v1/56)
- [Czy Programiście Warto Się Specjalizować?](https://livebooks.pl/materials/v1/57a)
- [Test wiedzy do rozdziału: 03 SPRING MVC](https://livebooks.pl/materials/v1/57b)
### Wzorzec MVC
- Model - jest reprezentacją logiki aplikacji np. klasa Car i jego kilka obiektów
- Controler - przyjmuje dane wejściowe od użytkownika i reaguje na jego poczynania, zarządzając aktualizacje modelu oraz odświeżenie widoków
- View - opisuje jak wyyświetlić pewną część modelu w ramach interfejsu użytkownika

##### Obsługa żadań
1. DispatcherServlet
   + Handler Mapping
   + Controller
   + View Resolver
   + View
   
## Rest client
- [Test wiedzy](https://livebooks.pl/materials/v1/65)
### Klasa `RestTemplate`
- Metoda `Exchange`
  - obsługuje metody GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS, TRACE
  - pozwala na przekazywanie: nagłówka, parametrów, ścieżki, ciała.
#### GET z parametrem
- https://livebooks.pl/materials/v1/hello-api
- przykłądowe wywołanie:
```java
public String callGet(){
	RestTemplate rest = new RestTemplate();
	ResponseEntity<String> exchange = rest.exchange(
	"https://livebooks.pl/materials/v1/hello-api?name=Przemek",
	HttpMethod.GET,
	HttpEntity.EMPTY,
	String.class);
	return exchange.getBody();
}
```
#### POST z body
- parametry przyjmuje przez body
- przykładowe wywołanie:
```java
public String callPost(){
	RestTemplate rest = new RestTemplate();
	
	MultiValueMap<String, String> map = new LinkedMultiValueMap<String, String>();
	map.add("name", "Przemek");
	
	HttpEntity<MultiValueMap<String, String>> httpEntity = new HttpEntity<>(map, new HttpHeaders());
	
	
	ResponseEntity<String> exchange = rest.exchange(
	"https://livebooks.pl/materials/v1/hello-api",
	HttpMethod.POST,
	httpEntity,
	String.class);
	return exchange.getBody();
}
```
#### Pobieranie obiektu
- Najczęściej trzeba zbudować klasę modelową dla zwracanego obiektu
- [generator modeli z jsona](https://www.jsonschema2pojo.org)
- [Try Public APIs for free](https://livebooks.pl/materials/v1/64)

## Programowanie aspektowe i zadania cykliczne
- [Zastosowanie Wzorca Proxy w Praktycznych Rozwiązaniach](https://livebooks.pl/materials/v1/68)
- Przechwytywanie działąń danej metodyw celu uruchomienia jakiegoś framentu kodu przed lub po logice wykonującej się w przechwytywanej metodzie.
- Zastosowanie:  
  - sprawdzanie uprawnień użytkownika
  - logowanie zdarzeń
  - obsługa wyjątków
  - obsługa tranzakcji
  
### Pojęcia dotyczące AOP
- Punkt przecięcia (Pointcut) wyrażenie (w postaci ścieżki lub adnotacji), które definiuje miejsce wywołania porady
- Porada (advice) - metoda, która zostanie wywołana gdy warunek zdefiniowany w punkcie przecięcia zostanie spełniony
  - @Before, @After, @Around
- Aspekt - klasa, która zawiera porady
  - Oznaczona `@Aspect`
  - Musi być komponentem zarządzanym przez Spring
- Przykład 1
```java
public String sayHello(){
	 return "Hello";
}

@Aspect
@Component
public class HelloAspect{

@Around("execution(String pl.bykowski.springbootaop.HelloApi.sayHello())")
	public void aroundHello(ProceedingJointPoint jointPoint) throws Throwable{
		System.out.println("aroundHello");
		jointPoint.proceed();
	}
}

@Before("execution(String pl.bykowski.springbootaop.HelloApi.sayHello())")
	public void beforeHello(){
		System.out.println("beforeHello");
	}
}

@After("execution(String pl.bykowski.springbootaop.HelloApi.sayHello())")
	public void afterHello(){
		System.out.println("afterHello");
	}
}
```
### Wykorzystanie adnotacji
- Definiujemy własną adnotację, która można dodać nad metodą biznesową
```
@HelloAspect
public String sayHello(){
	 return "Hello";
}
```
- W punkcie przecieńci aokreślamy, która adnatacja ma być śledzona
```
@Before("@annotation(HelloAspect)")
public void beforeHello(){
	 System.out.println("beforeHello");
}
```
## Zadania cykliczne
- [Test wiedzy](https://livebooks.pl/materials/v1/79)
- Operacje, które wykonują metody co zadany interwał czasowy.
- W klasie konfiguracyjnej umieszczamy `@EnableScheduling`.
- Zadania cykliczne konfigurujemy adnotacją `Scheduled` z parametrami:
  - fixedDelay - co ile sek od zakończenia poprzedniego wykonania ma się wywołąć metoda
  - cron - wyrażenie **cron** określa interwał czasu
  - fixedRate - interwał czasowy, metoda wykona się niezależnie czy poprzednia zakończyła zadanie
  
### Przykłady
- `@Scheduled(fixedDelay = 1000)` - co 1 sek od zakończenia poprzedniego zadania
- `@Scheduled(fixedRate = 1000)` - co 1 sek
- `@Scheduled(cron = "0 2 * * *")` - codziennie o 2:00 w nocy
- `@Scheduled(fixedDelay = 1000, initialDelay = 5000)` - wystartuje po 5 sek, a potem wykonuje się co 1 sek
- `@Scheduled(cron = "{cron.value}")` - zgodnie z wyrażeniem z konfiguracji
- Co 5 min, a dodatkowo o 4:00 rano każdego dnia
```
@Schedules({
	@Scheduled(cron = "*/5 * * * *"),
	@Scheduled(cron = "0 */4 * * *")
})
```
### Wady
- hardcodowaniew konfiguracji,
- probematyczność przy  testowaniu,
- zmiany częstotliwości wykonywania zadania wymaga przebudowania całej aplikacji.

## Spring JDBC
- [Github - spring-jdbc](https://livebooks.pl/materials/v1/86a)
- [Spring Boot We Współpracy Z JDBC](https://livebooks.pl/materials/v1/86b)
- [Test wiedzy do rozdziału: 06 SPRING JDBC](https://livebooks.pl/materials/v1/87)
- JDBC(Java DataBase Connectivity) - najprostszy sposób komunikowania się z bazami danych
- interfejs, dzięki któremu możemy wykonywać najprostsze zapytania SQL na bazie danych w javam
- zależności

```xml
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-jdbc</artifactId>
</dependency>

<!--sterownik do bazy danych -->
<dependency>
	<groupId>mysql</groupId>
	<artifactId>mysql-connector-java</artifactId>
</dependency>
```
- przykład:
```java

@Configuration
public class Config {

	@Value("${url}")
	private String url;
	
	@Value("${dbUser}")
	private String dbUser;
	
	@Value("${password}")
	private String password;

	@Bean
	public DataSource getDataSource(){
		DataSourceBuilder dataSourceBuilder = DataSourceBuilder.create();
		dataSourceBuilder.url(url);
		dataSourceBuilder.username(dbUser);
		dataSourceBuilder.password(password);
		dataSourceBuilder.driverClassName("com.mysql.jdbc.Driver");
		return dataSourceBuilder.build();
	}
	
	@Bean
	public JdbcTemplate getJdbcTemplate(){
		return new JdbcTemplate(getDataSource());
	}
}
```
- przykład DAO:
```java

@Repository
public class CarDao {

	private JdbcTemplate jdbcTemplate;

	@Autowired
	public CarDao(JdbcTemplate jdbcTemplate){
		this.jdbcTemplate = jdbcTemplate;
	}

	public void save(Car car){
		String sql = "INSERT INTO Car VALUES(?,?,?,?)";
		jdbcTemplate.update(sql, new Object[]{
		car.getCarId(),
		car.getMark(),
		car.getModel(),
		car.getColor()
		});
	}
		
	public List<Map<String,Object>> showByMark(String mark){
		String sql = "SELECT * FROM Car WHERE mark LIKE ?";
		return jdbcTemplate.queryForList(sql, new Object[]{mark});
	}
	
	@EventListener(ApplicationReadyEvent.class)
	public void dbInit(){
		save(new Car(1, "Fiat", "126p", "red"));  
		save(new Car(2, "Fiat", "126p", "black"));
		save(new Car(3, "Audi", "A1", "silver"));
		save(new Car(4, "Audi", "A2", "white"));
	}
}
```
## Spring Data
- [Przykład video](https://livebooks.pl/materials/v1/102a)
- [Repozytorium](https://livebooks.pl/materials/v1/102b)

### Zależności
- Spring Data
```xml
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>
```
- Sterownik
```
<dependency>
	<groupId>mysql</groupId>
	<artifactId>mysql-connector-java</artifactId>
</dependency>
```
### Encja JPA
- Encja musi zawierać:
  - adnotację @Entity
  - bezparametrowy kontruktor
  - gettery i settery do wszystkich pól, ktore maja być składowane w bazie
  - pole do przechowywanioa id wraaz z adnoracją @id
  
#### Przykład
```java
@Entity
public class User{
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	private String username;
	private String surname;
	
	public Long getId(){
		return id;
	}
	public void setId(Long id){
		this.id = id;
	}
	public String getUsername(){
		return username;
	}
	public void setUsername(String username){
		this.username = username;
	}
	public String getSurname(){
		return surname;
	}
	public void setSurname(String surname){
		this.surname = surname;
	}
}
```
- Strategie generowanie kluicza:
  - GenerationType.AUTO - framework i rodzaj bazy danych sami decydują o generowaniu,
  - GenerationType.IDENTITY - generowanie zwiększając wartość o 1,
  - GenerationType.SEQUENCE - generowanie na podstawie sekwencji,
  - GenerationType.TABLE - informacja na temat ostatniego klucza jaki będzie przyznawany jest zapisywana w dodatkowej tabeli.
  
### Repozytorium
- Wzorzec umożliwia zarzadzanie dostępem do danych i wykonywanie różnorodnych operacji na konkretnym ich typie,
- Z perspektywy użytkowania repozytorium powinno zachować się jak kolekcja - obsługiwać takie operacje jak dodawanie, usuwanie, zawieranie, modyfikowanie itp..
#### Przykład
- Interfejs dostarczony przez Spring Data
```java
public interface JpaRepository<T, ID> extends PagingAndSortingRepository<T, ID>, QueryByExampleExecutor<T>{

	@Override
	findAll();
	
	@Override
	List<T> findAll(Sort sort);
	
	@Override
	List<T> findAllById(Iterable<ID> ids);
	
	@Override
	<S extends T> List<S>saveAll(Iterable<S> entities);
	
	void flush();
	
	<S extends T> S saveAndFlush(S entity);
	
	void deleteInBatch(Iterable<T> entities);
	
	void deleteInBatch();
	
	T getOne(ID id);
	
	@Override
	<S extends T> List<S>findAll(Example<S> example);
	
	@Override
	<S extends T> List<S>findAll(Example<S> example, Sort sort);
}
``` 
- Naszym zadaniem jest jedynie rozszerzanie istniejącego interfejsu
```java
public interface UserRepo extends JspaRepositry<User, Long>{
}
```
### Konfiguracja
```properties
spring.datasource.password=password
spring.datasource.username=username
spring.datasource.url=jdbc:mysql://localhost:3306/database
#strategia zarządzania schematem bazy
spring.jpa.hibernate.ddl-auto=update
```
#### Strategie zarządzania schematem bazy danych
- create:
  - jeśli baza nie istnieje, utworzy ją,
  - za każdym razem usuwa schemat bazy danych wraz z rekordami,
  - usuwanie schematu nawiązuje tylko do tych tabel, które mają powiązanie z encjami JPA.
- update:
  - jeśli schemat bazy nie istnieje, to go utworzy,
  - w przypadku kiedy schemat bazy danych jest rozbieżny z encjami JPA, to dokona się aktualizacja tabel,
  - aktualizacja tabel tworzy jedynie nowe kolumny. W przypadku kiedy w encji JPA zostanie usunięte pole, update nie usunie kolumny, do której to pole nawiązywało,
  - nie usuwa istniejących repordów znajdujących się w bazie,
  - w przypadku rozszerzenia istniejącej tabeli o nową kolumnę, istniejące wpisy w DB zostaną uzupełnione w tej kolumnie wartością NULL.
- create-drop
  - jeśli baza danych nie istnieje, to utworzy ją,
  - usuwa schemat bazy danych wraz z rekordami w momencie zamknięcia SessionFactory,
  - usuwanie schematu nawiązuje tylko do tych tabel, które mają powiązanie z encjami JPA,
  - przeważnie używany do testów.
  
- validate
  - sprawdza poprawność schematu,
  - nie wprowadza żadnych zmian w bazie danych,
  - jeśli struktura bazy danych nie istnieje, to jej nie utworzy,
  - w przypadku braku tabel wyrzuci błąd `Table not found: <table name>`,
  - sprawdza, czy kolumny pokrywają się  z polami, a w przypadku niepowodzenia zgłasza błąd.
  
### Utrwalanie danych
```java
public class UserManager{
	User user = new User();
	user.setUsername("Przemysław");
	user.setSurname("Bykowski");
	userRepo.save(user);
	}
}
```